<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World lalla</title>
    <link href="/2020/12/13/hello-world/"/>
    <url>/2020/12/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="edit-github-from"><a href="#edit-github-from" class="headerlink" title="edit github from"></a>edit github from</h3><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h4 id="Github-action"><a href="#Github-action" class="headerlink" title="Github action"></a>Github action</h4><ul><li>加上 github action 就完成了自动打包 部署  不再使用hexo generate deploy, 直接提交代码就可以了</li></ul><h4 id="改变模板留下链接进行直接编辑-文章内容-只能在-hexo-serve-时看到编辑键"><a href="#改变模板留下链接进行直接编辑-文章内容-只能在-hexo-serve-时看到编辑键" class="headerlink" title="改变模板留下链接进行直接编辑 文章内容, 只能在 hexo serve 时看到编辑键"></a>改变模板留下链接进行直接编辑 文章内容, 只能在 hexo serve 时看到编辑键</h4>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3</title>
    <link href="/2020/12/13/CSS3/"/>
    <url>/2020/12/13/CSS3/</url>
    
    <content type="html"><![CDATA[<h3 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h3><ul><li><p>边框</p><ul><li><p>border-radius    圆角</p><blockquote><p>默认一个值应用在四个方向,如果想单独设置,可以各四个值分别代表 从左上顺时针到左下的角</p></blockquote></li><li><p>box-shadow   边框阴影 </p><blockquote><p>四个值分别   x偏移量 | y偏移量 | 阴影模糊半径 | 阴影颜色 </p></blockquote></li></ul></li><li><p>border-image    用图片创建边框</p><ul><li><blockquote><p>三个值 /* border-image: image-source image-height image-width image-repeat */</p></blockquote></li></ul></li><li><p>背景  </p><ul><li>background-size  规定背景图片的尺寸进行缩小扩大使用</li><li>background-origin  规定背景图片的定位区域<blockquote><p>参数:content-box、padding-box 或 border-box  以这几个区域为参考放置图片</p></blockquote></li></ul></li><li><p>文本</p><ul><li>text-shadow 文本应用阴影 (和box-shadow 格式一样)</li><li><blockquote><p>四个值分别 :水平阴影(px)、垂直阴影 (px)、模糊距离(px)，以及阴影的颜色</p></blockquote></li><li>word-break  指定了单词怎样断行</li><li><blockquote><p>有些英语单词单纯断行影响阅读</p></blockquote></li></ul></li><li><p>字体</p><ul><li>@font-face 规则   应用时设置font-family: name 使用自己设置的名字<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;ciclefina&#x27;</span>;<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/cicle_fina-webfont.eot&#x27;</span>);<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/cicle_fina-webfont.eot?#iefix&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;embedded-opentype&#x27;</span>),<br>         <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/cicle_fina-webfont.woff2&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff2&#x27;</span>),<br>         <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/cicle_fina-webfont.woff&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),<br>         <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/cicle_fina-webfont.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>),<br>         <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/cicle_fina-webfont.svg#ciclefina&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;svg&#x27;</span>);<br>  <span class="hljs-attribute">font-weight</span>: normal;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>渐变</p><ul><li> linear-gradient()函数创建  </li><li><blockquote><p> background: linear-gradient(to bottom right, blue, pink);  第一个参数可选 也可以替换成角度  颜色参数也可以是多种颜色  可以控制结束为止,渐变中心… 在使用角度的时候, 0deg 代表渐变方向为从下到上, 90deg 代表渐变方向为从左到右</p></blockquote></li></ul></li></ul><h3 id="CSS-变形-transforms"><a href="#CSS-变形-transforms" class="headerlink" title="CSS 变形 (transforms)"></a>CSS 变形 (transforms)</h3><ul><li><p>transform-origin 指定原点的位置,默认值为元素的中心，可以被移动</p></li><li><p>适用于三维的属性</p><blockquote><p>首先需要设置的属性是透视值（perspective）。透视正是三维空间的立体感的源泉。元素与观察者之间的距离越远，他们就越小。  CSS 属性 perspective 可以更加真实3d的变换效果,一般放在变换图像外的容器写</p></blockquote><blockquote><p>通过 perspective-origin 属性来设置。默认透视值中，为观察者被置于中心，但是这并不总是适当的。<br>CSS 属性 transform-style 设置元素的子元素是位于 3D 空间中还是平面中。如果选择平面，元素的子元素将不会有 3D 的遮挡关系。<br> backface-visibility 指定当元素背面朝向观察者时是否可见。</p></blockquote></li></ul><ul><li><p>以下为transform利用函数</p><ul><li><p>translate()   偏移</p></li><li><blockquote><p>元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标）  translatex()  translatey()</p></blockquote></li><li><p>rotate() 平面旋转 参数给与度数</p></li><li><blockquote><p>元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转 rotateX() 围绕x轴旋转多少度  rotateY()  以上两个旋转都是围绕某个轴的<strong>立体旋转</strong></p></blockquote></li><li><blockquote><p>这里所有的3d坐标系, 都是y轴是竖直的,z轴则是向屏幕里的方向</p></blockquote></li><li><p>scale()  </p></li><li><blockquote><p>元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴） 当超出 [-1, 1]范围外时，缩放将在坐标方向上放大元素 如果为负值会反射(反方向投射)</p></blockquote></li><li><p>skew() </p><blockquote><p>一个元素在二维平面上的倾斜转换</p><ul><li>transform-origin  指明元素变形的远点</li></ul></blockquote></li></ul></li></ul><h3 id="CSS过渡-transitions"><a href="#CSS过渡-transitions" class="headerlink" title="CSS过渡 (transitions)"></a>CSS过渡 (transitions)</h3><ul><li><p>transition 提供了一种在更改CSS属性时控制动画速度的方法</p></li><li><p>想让一个元素的属性 transition起来 , 必须要先有预设值, 比如div元素 想要变换width, 那么div元素必须首先定义width,然后通过覆盖/ 添加类名的方式改变width 才可以, 如果一开始div没有width值, 通过添加类给与width值, 这时候是不发生变幻的</p><blockquote><p> 定义 transition:width 2s, height 2s, transform 2s 定义的样式后面书写时间  简写属性</p></blockquote></li><li><p>transition-delay<br>指定延迟，即属性开始变化时与过渡开始发生时之间的时长。</p></li><li><p>transition-duration 变换时间<br>-transition-timing-function 指定一个函数，定义属性值怎么变化</p></li><li><p>当过渡完成时触发一个事件，在符合标准的浏览器下，这个事件是 transitionend</p></li><li><blockquote><p>如果需要循环，查看 animation</p></blockquote></li><li><p>transition 是非常好的工具，可以让 JavaScript 效果平滑而不用修改 JavaScript</p></li><li><p>书写多个过渡效果时，每个完整的要用逗号隔开</p></li><li><p>触发过渡效果,只需要某个属性更改值,这时就会触发,比如 hover写新值,每次移入移出时都能触发过渡,js给标签添加新类也行</p></li></ul><blockquote><p>当过渡完成时触发一个事件，在符合标准的浏览器下，这个事件是 transitionend, 在 WebKit 下是 webkitTransitionEnd. propertyName字符串，指示已完成过渡的属性。 elapsedTime 浮点数，指示当触发这个事件时过渡已运行的时间</p></blockquote><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul><li><p>使用keyframes定义动画序列:@keyframes中补写关键帧 from{} to{},</p></li><li><p>animation 简写属性</p><pre><code>animation-duration  设置动画一个周期的时长animation-timing-function 定义CSS动画在每一动画周期中执行的节奏(匀速/先快后慢...)animation-direction  设置动画在每次运行完后是反向运行还是重新回到开始位置重复运行animation-delay 延迟animation-iteration-count 设置动画重复次数， 可以指定infinite无限次重复动画animation-name  指定由@keyframes描述的关键帧名称    </code></pre><blockquote><p> animation: 3s ease-in 1s 2 reverse both paused slidein    animation属性的最后slidein一定为动画名字由@keyframes 定义</p></blockquote></li><li><p>哪些 CSS 属性可以动画?  关注可动画属性列表 对CSS转换同样适用</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端Css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3 布局总览</title>
    <link href="/2020/12/13/CSS3-%E5%B8%83%E5%B1%80%E6%80%BB%E8%A7%88/"/>
    <url>/2020/12/13/CSS3-%E5%B8%83%E5%B1%80%E6%80%BB%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h2 id="布局拾忆"><a href="#布局拾忆" class="headerlink" title="布局拾忆"></a>布局拾忆</h2><ul><li>正常布局流,以下行为覆盖默认的布局流<ul><li>display 标准的有block inline , 其他的布局形式: </li><li>css Grid </li><li>Flexbox(弹性盒子)</li><li>position</li><li>多列布局</li><li>表格布局</li><li>float</li></ul></li><li>响应式布局</li></ul><h3 id="Flexbox-弹性盒子-专门设计出来用于创建横向或是纵向的一维页面布局"><a href="#Flexbox-弹性盒子-专门设计出来用于创建横向或是纵向的一维页面布局" class="headerlink" title="Flexbox(弹性盒子) : 专门设计出来用于创建横向或是纵向的一维页面布局"></a>Flexbox(弹性盒子) : 专门设计出来用于创建横向或是纵向的一维页面布局</h3><ul><li><p>flex 优势(出现的原因):使多列等高(不管内容)  所有子项有相同的宽/高度(不论还有多少宽高)  父元素中垂直居中块内容</p></li><li><p>flex布局 占用的空间是在设置 padding 和 margin 之后剩余的空间 即尺寸都是内容尺寸 弹性盒子的真正价值可以体现在它的灵活性/响应性 ,flex布局是弹性的 根据排列方式 对你的width进行增加 删除(所以设置的width不一定就按照这个)</p></li><li><p>flex-direction:column  指定主轴方向,默认row排成一排</p></li><li><p>flex-grow : 它指定了flex容器中剩余空间的多少应该分配给项目。剩余的空间是flex容器的大小减去所有flex项的大小加起来的大小</p></li><li><p>flex-basis: 元素的最低的一个值,根据元素的多少会变大(不会变小因为是先减去这个初始大小进行计算的宽/高度)</p></li><li><p>flex-wrap : nowrap  控制flex items换行,这里换行不是在指标签中的内容,而是容器中每个flex元素,每个flex元素看做一个整体控制进行换行否</p></li><li><p>flex (缩写):  flex-grow flex-shrink flex-basis      </p><blockquote><p>行内元素为弹性盒子,可以设置为inline-flex<br>flex-flow(缩写) : flex-direction flex-wrap<br>flex-basis: auto,auto将使用宽度 width作为flex-basis值。</p></blockquote></li><li><p>align-items 控制 flex 项在交叉轴上的位置,默认的值是 stretch，其会使所有 flex 项沿着交叉轴的方向拉伸以填充父容器, 如果父元素没有固定高度,那就和最长的那一列高度相等</p></li><li><blockquote><p>center 值会使这些项保持其原有的高度，但是会在交叉轴居中</p></blockquote></li><li><blockquote><p>align-self  可以覆盖align-items 一般用来设置某个特定的元素使用</p></blockquote></li><li><p>justify-content 控制 flex 项在主轴上的位置。默认值是 flex-start，这会使所有 flex 项都位于主轴的开始处。 </p></li><li><blockquote><p>space-around ——它会使所有 flex 项沿着主轴均匀地分布，在任意一端都会留有一点空间。 space-between 则不会再两端留有空间</p></blockquote></li></ul><ul><li>利用order 进行flex 项排序 ,默认值为0 order小的显示顺序在前 可以为负值</li></ul><h3 id="Grid布局-在两个维度把元素按行和列-排列整齐"><a href="#Grid布局-在两个维度把元素按行和列-排列整齐" class="headerlink" title="Grid布局 在两个维度把元素按行和列 排列整齐"></a>Grid布局 在两个维度把元素按行和列 排列整齐</h3><ul><li><p>通过display:gird转到grid布局,分别使用grid-template-rows/columns 两个属性定义一些行/列的大小</p><ul><li>grid-template-rows :规定每一行的高度,有几行写几个值,如果元素内容超过此高度,就会溢出</li><li>grid-template-columns :规定每一列的宽度,宽度内不会溢出内容</li><li><blockquote><p>默认你会看到列的高度调整为与最高的容器一样高<br>grid-template-columns: repeat(12, 1fr);创建12列等宽<br>fr 单位——这个为网格布局定义的单位,如果所有列都是1fr，它们将占用相等的空间量。这消除了计算百分比以创建灵活网格的需要。</p></blockquote></li></ul></li><li><p>利用 grid-column 和 grid-row 两个属性来指定元素跨越的列数/行数.</p></li><li><blockquote><p>grid-column: auto / span 6; 跨6列</p></blockquote></li><li><blockquote><p>grid-column:span 2/3 -&gt; 从第三基线向前扩展两行</p></blockquote></li><li><blockquote><p>grid-template-areas设置区域 ,用 grid-area  是设置行和列的grid-column/row的简写</p></blockquote></li><li><p>grid-gap 属性用来设置网格行与列之间的间隙</p></li></ul><blockquote><p>使用grip-row/column 时有时候会导致子项之间位置变化,这时候同时设置grip-row grip-column 两项保证位置不变的情况进行扩展</p></blockquote><ul><li>在不使用gird的情况下怎么创建网格布局: 可以利用div块 子元素的浮动属性,构建一个网格系统布局,但是这是固定的宽度,创建流体网格可以使用百分比设置宽度   flex也可以用来创建网格系统,但是flex仍然是一维设计的,用来处理网格还是需要计算width</li><li>第三方网格系统 :  Bootstrap 提供了独立的网格系统</li></ul><h3 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h3><p>-绝对定位元素（absolutely positioned element）是计算后位置属性为 absolute 或 fixed 的元素</p><ul><li><p>absolute 定位 :元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。 没有非static祖先元素定位,则针对可视窗口定位(类似fixed)</p></li><li><blockquote><p>绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p></blockquote></li><li><p>绝对定位元素填充可用空间 :</p></li><li><blockquote><p>大多数情况下，height和width 被设定为auto的绝对定位元素，按其内容大小调整尺寸, 被绝对定位的元素可以通过指定top和bottom ，保留height未指定（即auto），来填充可用的垂直空间。它们同样可以通过指定left 和 right并将width 指定为auto来填充可用的水平空间。     当大小不足以满足上下 左右的px值时,top left优先级大于 rigtht bottom</p></blockquote></li><li><p>固定定位应用于视口(viewport)边框。利用这一特性，我们可以轻松搞出一个固定位置的菜单，而不受底下的页面滚动的影响。</p></li><li><p>相对定位(relative positioning)让你能够把一个正常布局流(normal flow)中的元素从它的默认位置按坐标进行相对移动。</p></li><li><p>固定定位fixed：对于浏览器可视窗口进行定位</p></li><li><p>粘性定位(sticky position)  元素根据正常文档流进行定位，然后相对它的最近滚动祖先,无法做到能够随意在页面像absolute那样定位, 正常文档流,简单理解粘性定位,是针对外围的父元素(作为容器)进行定位</p></li></ul><blockquote><p>left rigth 的值如果是百分比,则是非static定位的祖先元素的宽度   top bottom则是高度的百分比<br>z-index属性。 “z-index”是对z轴的参考 ,当元素开始重叠，什么决定哪些元素出现在其他元素的顶部</p></blockquote><ul><li>定位层级z-index：在重叠时决定谁在上面<br>对于<strong>定位元素</strong>来说通过定义层级来决定谁的层级高<br>默认后者高于前者 <strong>同级的元素才有可比性</strong>,父子元素之间的z-index是失效的(除非子元素设置负值父元素设置auto)</li><li>对于同级元素说,z-index根据数值大小进行排列</li><li>z-index 也支持过渡效果,它没有在每一步改变它的值(没有渐变效果)，所以你认为它没有过渡效果，但实际上是有的<blockquote><p>对于float元素 z-index还有更复杂的状况.详细查询资料</p></blockquote></li></ul><h3 id="多列布局-通常也简写为-multicol"><a href="#多列布局-通常也简写为-multicol" class="headerlink" title="多列布局 通常也简写为 multicol"></a>多列布局 通常也简写为 multicol</h3><ul><li>column-count    column-width 属性把块变为多列容器<blockquote><p>column-width  浏览器将按照你指定的宽度尽可能多的创建列；任何剩余的空间之后会被现有的列平分。 这意味着你可能无法期望得到你指定宽度，除非容器的宽度刚好可以被你指定的宽度除尽。</p></blockquote></li><li>Multicol 创建的列无法单独的设定样式。 不存在让单独某一列比其他列更大的方法，同样无法为某一特定的列设置独特的背景色、文本颜色。<ul><li> column-gap 改变列间间隙。</li><li> column-rule 在列间加入一条分割线。</li></ul></li><li>多列布局的内容因为空间问题(分配内容是按一列一列的填充)被拆成多个内容(称为内容折断)  通过属性break-inside: avoid 在内容(子元素)中添加防止</li></ul><h5 id="float-浮动"><a href="#float-浮动" class="headerlink" title="float 浮动"></a>float 浮动</h5><ul><li><p>浮动后,文本和内联元素环绕它,如果文本或者内联元素包裹在div中,那么仍然会环绕它,(块级元素不会换行,除非div块中还有块级元素,块级元素后还有内容),</p></li><li><p>行级元素可以设置宽高有了块级元素的特征 ，不设置时有内容撑开元素<br>浮动元素向指定方向移动，直到遇见边框。<br>浮动元素浮动时子元素撑开父元素 (创建bfc时才行)</p></li><li><p>浮动元素会提升层级压住标准元素</p></li><li><p>clear 属性适用于浮动和非浮动元素。 clear方法可以让浮动元素撑开父容器</p></li></ul><h3 id="正常文档流"><a href="#正常文档流" class="headerlink" title="正常文档流"></a>正常文档流</h3><ul><li>取得元素的内容来放在一个独立的元素盒子中，然后在其周边加上内边距、边框和外边距 — 就是我们之前看到的盒子模型。</li><li>默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致,你无法设置行内元素的height width</li></ul><h3 id="表格布局-通常用于老的不支持-弹性盒子的浏览器"><a href="#表格布局-通常用于老的不支持-弹性盒子的浏览器" class="headerlink" title="表格布局(通常用于老的不支持 弹性盒子的浏览器)"></a>表格布局(通常用于老的不支持 弹性盒子的浏览器)</h3><ul><li>display: table  display: table-row ..</li></ul><hr><p>(待实践…)</p><h3 id="传统的布局方法"><a href="#传统的布局方法" class="headerlink" title="传统的布局方法"></a>传统的布局方法</h3><ul><li>我们在宽度的表示上都用的是百分比,这创建了一个流动布局（liquid layout），能够适应不同的屏幕大小，这是响应式网页非常有价值的一个工具。</li><li>固定宽度网格,通过浮动和div块固定的width创建一个网格</li><li>创建液态网格(弹性（流体）的网格),把固定宽度转为伸缩的基于百分比宽度的算式在下面：</li><li><blockquote><p>target (目标列长度)/ context (上下文)= result  你可以用 calc() 函数来在CSS里面做数学方面的计算</p></blockquote></li><li>我们挪动小数点两位，得到百分数,在css中我们使用百分比代替固定数值</li><li><blockquote><p>这个系统的最大限制是，它本质上是一维的。我们在处理列、让元素跨越列，但是处理不了行。如果不设置一个确定的高度，用老方法很难控制元素高。这个方法很不灵活 —它只有在你确定你的内容有个明确的高的情况下有用。</p></blockquote></li></ul><h3 id="旧浏览器支持"><a href="#旧浏览器支持" class="headerlink" title="旧浏览器支持"></a>旧浏览器支持</h3><ul><li>在CSS中构建回滚 CSS规范包含了在一个物件上同时应用两种布局的时候，解释浏览器反应的信息</li><li>特性查询  允许测试一个浏览器是否支持特定的一个css特性</li><li>测试旧浏览器</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端Css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Css布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS指导</title>
    <link href="/2020/12/13/CSS%E6%8C%87%E5%AF%BC/"/>
    <url>/2020/12/13/CSS%E6%8C%87%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="CSS-指南"><a href="#CSS-指南" class="headerlink" title="CSS 指南"></a>CSS 指南</h3><h4 id=""><a href="#" class="headerlink" title=""></a><!doctype html></h4><ul><li><p>这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“**怪异模式(兼容模式)**”的渲染模式。“<!DOCTYPE html>“ 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。</p></li><li><p>兼容模式下 会出现很多问题, 比如 css应用问题, 加上标签和不加标签可能会出现差异,不如各个浏览器排版会出现问题</p><h4 id="css引用方法"><a href="#css引用方法" class="headerlink" title="css引用方法"></a>css引用方法</h4></li></ul><ol><li>行内式 </li><li>内嵌式  在head标签中书写《style》</li><li>链接式  《link href  rel  type》<h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4></li></ol><ul><li><p>选择器：基本选择器</p><pre><code>  元素选择器、  类选择器、格式.   id选择器 格式：#   伪类/元素选择器 格式--&gt;标签：伪类  标签 ::伪元素     通用选择器 格式 *</code></pre></li><li><p>复合选择器（对基本选择器的组合使用）</p><pre><code>  交集选择器 格式：中间无空格   并集选择器(对于多个标签同时修饰) 格式：,  后代选择器  格式：中间加空格    子元素选择器：格式：标签&gt;标签   相邻兄弟选择器(拥有相同的父元素) 格式：+  属性选择器：格式 ：标签[属性]   </code></pre><blockquote><p>子元素选择器范围比后代更小<br>一个页面只能有一个独特的ID，但是很多元素都有相同的类 </p></blockquote></li><li><p>伪类选择器不能被嵌套  ，他们不能被当作 :not() 中的参数 ，形如 :not(p::before) 这样的选择器将不会工作。</p></li><li><h4 id="css样式规则"><a href="#css样式规则" class="headerlink" title="css样式规则"></a>css样式规则</h4></li></ul><ol><li>优先级  id&gt;class&gt;…  那个选择器更具体 那个优先级就高</li></ol><ul><li>为目标元素直接添加样式，永远比继承样式的优先级高，无视优先级的遗传规则。从上面结果不难看出 行间style &gt; 后代 &gt; id &gt; class &gt; 元素<blockquote><p>判断优先级，以权重为指标，权重越大优先级越高：一般约定 id选择器的权重为100，类选择器权重为10，元素选择器权重为1。一个复杂的选择器的权重,例如后代选择器 ID选择器 元素选择器 权重为101,</p></blockquote></li></ul><ol><li><p>层叠  当应用两条同级别的规则到一个元素的时候，写在后面的就是实际使用的规则。</p></li><li><p>继承  设置在父元素上的css属性是可以被子元素继承的，有些不行不如width border…</p><pre><code> 控制继承:  inherit 开启继承,浏览器默认值 inherit  unset 将属性重置为自然值，也就是如果属性是自然继承那么就是 inherit，否则和 initial一样       all: unset:重设所有属性值</code></pre></li><li><p>!important打破优先级使用该属性 覆盖!important 唯一的办法就是另一个 !important  </p></li></ol><ul><li><p>有继承性的属性</p><pre><code>  font  text-indent：文本缩进  text-align：文本水平对齐  visibility:隐藏  line-height：行高  word-spacing：增加或减少单词间的空白（即字间隔）  letter-spacing：增加或减少字符间的空白（字符间距）  text-transform：控制文本大小写  direction：规定文本的书写方向  color</code></pre></li><li><p>@import  @media<br>font, background, padding, border, andmargin等属性称为速记属性</p></li></ul><h4 id="盒子模型-–参考MDN"><a href="#盒子模型-–参考MDN" class="headerlink" title="盒子模型  –参考MDN"></a>盒子模型  –参考MDN</h4><ul><li><p>基本盒子分为：块级盒子（Block box） 和 内联盒子（Inline box） </p></li><li><p>css的box模型有内部和外部显示类型 ，外部显示类型，来决定盒子是块级还是内联。同样盒模型还有内部显示类型，它决定了盒子内部元素是如何布局的。默认情况下是按照正常文档流布局 </p></li><li><p>如果设置 display: flex，在一个元素上，外部显示类型是 block，但是内部显示类型修改为 flex。</p></li><li><p>内联盒子的特征，width height无效，就是说内联盒子的内容大小不会发生改变，</p><blockquote><p>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开。 如果碰见边界的话设置垂直padding,也不会应用<br>水平方向的内边距、外边距以及边框会被应用而且也会把其他处于 inline 状态的盒子推开。</p></blockquote></li><li><p>盒子模型分为 标准盒模型 替代盒模型 ，区别在于标准盒模型计算盒子大小是需要加上 padding border</p><blockquote><p>盒子大小是border以内的值不包括margin<br>如果使用替代盒模型 需要html设置，全部改为替代模型</p></blockquote></li></ul><p>-</p><ul><li>display: inline-block 不希望一个项切换到新行，但希望它可以设置width 和height 属性会生效。 padding, margin, 以及border 会推开其他元素。  外部仍然为inline的状态 <blockquote><p>inline或者block，来控制盒子的外部显示类型<br>flex属性：内部显示属性  内联显示，外部显示类型为块级元素</p></blockquote></li><li>inline-flex：内外部为内联属性  但是和inline属性有点差别</li></ul><ul><li><p>内边距 padding特点：</p><pre><code>  撑大元素的尺寸，上下左右多出padding设置值，也就是2*padding  背景会随着撑大元素的尺寸而扩大</code></pre></li></ul><h5 id="盒子模型是否被内容撑开的问题"><a href="#盒子模型是否被内容撑开的问题" class="headerlink" title="盒子模型是否被内容撑开的问题"></a>盒子模型是否被内容撑开的问题</h5><ul><li><p>块级元素不能正好的撑开内联元素,而是外部的内联元素会变得超级大,所谓内容决定内联元素的宽度指的是文字,图片img元素也不能撑开内联元素 ,(内联元素无法撑开内联元素,通过嵌套span考证,个人理解,内联元素只能被文本撑开)  如果想要撑开,就把外层的内联元素换成 inline-black元素</p></li><li><p>内联元素撑开块级元素,带有文档的内联元素可以撑开块级元素,不带有文字的内联元素,比如img 不能正好的撑开块级元素,会有缝隙,解决方法:设置内部为块级元素就可以撑开 或者固定块级元素高度</p></li><li><p>只有块级元素能正好的撑开元素</p></li><li><p>三层嵌套 依次块级元素 内联元素 块级元素  按照以上分析  最内层的块级元素不能正好撑开内联元素,但是可以正好撑开最外部的块级元素 </p></li><li><p>块级元素在内联元素中,不再影响内联元素外的元素 </p></li></ul><h5 id="外边距margin-折叠"><a href="#外边距margin-折叠" class="headerlink" title="外边距margin 折叠"></a>外边距margin 折叠</h5><blockquote><p>创建新的BFC避免两个相邻 &lt; div&gt; 之间的外边距合并问题   </p></blockquote><blockquote><p>注意有设定float和position=absolute的元素不会产生外边距重叠行为。脱离文档流不存在此问题</p></blockquote><ol><li><p>同一层相邻元素之间的外边距重叠</p><pre><code> 外边距合并：相邻元素margin-top 和margin-bottom 长度会合并成两者间较大的数值，如果有负值就是两者的和,两者都为负值就取绝对值最大的 解决: 后一个元素加上clear-fix清除浮动。</code></pre></li><li><p>没有内容将父元素和后代元素分开</p><pre><code> 父子元素外边距合并：如果没有边框border，内边距padding，行内内容(背景也算内容)，也没有创建块级格式上下文或清除浮动来分开一个块级元素的上边界margin-top 与其内一个或多个后代块级元素的上边界margin-top； 父子元素上外边距会合并,较大的值最终会溢出到父级块元素外面。表现为父元素向下推了子元素多出来的值</code></pre></li></ol><ol start="3"><li><p>空白div块</p><pre><code> 假设有一个空元素，它有外边距，但是没有边框或填充 高度 inline clear-fix。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并。</code></pre></li></ol><h5 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h5><ul><li>块格式化上下文（Block Formatting Context，BFC)，<strong>是块盒子的布局过程发生的区域</strong>，也是浮动元素与其他元素交互的区域。<blockquote><p>块格式上下文 最主要的目的:  对浮动元素的限制  清除浮动的范围,块格式上下文有点像一个针对浮动元素的容器</p></blockquote></li></ul><ul><li>浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠（Margin collapsing）也只会发生在属于同一BFC的块级元素之间。</li><li>一个新的 display 属性的值，它可以创建无副作用的 BFC。在父级块中使用 display: flow-root 可以创建新的 BFC。</li></ul><ul><li>overflow 值不为 visible 的块元素 绝对定位元素  行内块元素 浮动元素…<blockquote><p>更多创建bfc方法参考 MDN  </p></blockquote></li></ul><ul><li><p>clearfix方法</p></li><li><p>如果一个元素里只有浮动元素，那它的高度会是0。如果你想要它自适应即包含所有浮动元素，那你需要清除它的子元素</p></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#container</span><span class="hljs-selector-pseudo">::after</span> &#123; <br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: block; <br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="高度塌陷和BFC"><a href="#高度塌陷和BFC" class="headerlink" title="高度塌陷和BFC"></a>高度塌陷和BFC</h6></li><li><p>在文档流中，父元素的高度默认是被子元素撑开的，当为子元素设置浮动以后，子元素会完全脱离文档流，此时就会导致子元素无法撑起父元素的高度，此引发父元素的高度塌陷</p></li><li><p>解决塌陷方法:创建一个会包含这个浮动的BFC:</p></li></ul><h5 id="box-sizing-属性"><a href="#box-sizing-属性" class="headerlink" title="box-sizing 属性"></a>box-sizing 属性</h5><ul><li><p>content-box(默认值),设置宽高仅仅是内容的, 任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</p></li><li><p>border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。</p></li></ul><h4 id="隐藏标签"><a href="#隐藏标签" class="headerlink" title="隐藏标签"></a>隐藏标签</h4><ul><li>display:none —不为被隐藏的对象保留其物理空间，即该对象在页面上彻底消失，通俗来说就是看不见也摸不到。</li><li>visible:hidden— 使对象在网页上不可见，但该对象在网页上所占的空间没有改变，通俗来说就是看不见但摸得到。这是个继承元素</li><li>元素使用visibility:hidde时 如果在设置:hover状态,这是不会触发,因为这时已经隐藏不可能触发</li><li>opacity : 0 , 不可见,但保留位置</li></ul><h4 id="行内元素-可替换元素"><a href="#行内元素-可替换元素" class="headerlink" title="行内元素 可替换元素"></a>行内元素 可替换元素</h4><ul><li><p>一般情况下，行内元素只能包含数据和其他行内元素。行内元素列表</p><p>  b, big, i, small, tt<br>  abbr, acronym, cite, code, dfn, em, kbd, strong, samp, var<br>  a, bdo, br, img, map, object, q, script, span, sub, sup<br>  button, input, label, select, textarea</p></li><li><p>可替换元素可以设置宽高,css对可替换元素的影响在 内容在框中的位置和定位方式  可替换元素</p><pre><code>  &lt;iframe&gt;  &lt;video&gt;  &lt;embed&gt;  &lt;img&gt;</code></pre><blockquote><p>“image” 类型的 &lt; input&gt; 元素就像&lt; img&gt;一样被替换。 </p></blockquote></li></ul><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><ul><li><p>根据各种设备特征和参数的值或者是否存在来调整您的网站或应用,它们是响应式设计的关键组成部分。</p></li><li><p>在html中应用媒体查询 : 在&lt; link&gt;元素的media属性中，它们定义了待应用链接资源（通常是CSS）的媒体。   在&lt; style&gt;元素的media属性中，它们定义待应用样式的媒体。</p></li><li><p> 在 CSS 中，使用 @media at-rule 根据媒体查询的结果有条件地应用样式表的一部分。 使用 @import 条件地应用整个样式表。</p><blockquote><p>格式  @media media-type 媒体类型(4种) and (media-feature-rule 媒体特性) { }<br>媒体类型: 告诉浏览器这段代码是用在什么类型的媒体上的  媒体查询中存在逻辑运算</p></blockquote></li><li><p>在 JavaScript 中使用媒体查询   使用 Window.matchMedia() 方法根据媒体查询测试窗口 MediaQueryList.addListener()在查询状态发生变化时收到通知  DOM 提供了通过编程方法来获得媒体查询结果的特性   具体参看MDN</p></li></ul><blockquote><p>使用媒体查询 需要参考 媒体特性  详情查询MSN @media</p></blockquote><h4 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h4><ul><li><p>指的是允许Web页面适应不同屏幕宽度因素等，进行布局和外观的调整的一系列实践</p><blockquote><p>需要你理解的很重要的一点是响应式Web设计不是单独的技术,它是用来建立可以响应查看内容的设备的样式的一个词。</p></blockquote></li><li><p>响应式设计是三种技术的混合使用。第一个是液态网格,第二个是液态图像的理念,第三个关键的组件是媒体查询</p><ul><li>媒介查询允许我们运行一系列测试，例如用户的屏幕是否大于某个宽度或者某个分辨率，并将CSS选择性地适应用户的需要应用在样式化页面上。</li></ul></li><li><p>你真的需要媒体查询吗？</p><blockquote><p>弹性盒、网格和多栏布局都给了你建立可伸缩的甚至是响应式组件的方式，而不需要媒体查询。</p></blockquote></li></ul><ul><li><p>响应式设计方法: </p><pre><code>   你可以采用两种方式实现响应式设计。你可以从桌面或者最宽的视图开始，然后随着视口变得越来越小，加上断点，把物件挪开；你也可以从最小的视图开始，随着视口变得越来越大，增添布局内容。第二种方式被叫做移动优先的响应式设计，很多时候是最值得仿效的做法。</code></pre></li></ul><ul><li>响应式图像 <ul><li>使用max-width : 100% 设置img ,这种方式的弊端显而易见,图像有可能会显示得比它的原始尺寸小很多，以至于浪费带宽(手机端不需要这么大的文件)</li><li>使用了&lt; picture&gt;元素 或者&lt; img&gt; srcset和sizes 特性 浏览器将会选择对设备最合适的图像，以确保用户下载尺寸适合他们使用的设备的图像。 (详情查看picture)</li></ul></li></ul><ul><li>响应式排版(针对文本)</li><li>使用视口单位(vw)实现响应式排版,文本内容使用vw根据视口大小变化</li><li><blockquote><p>永远都不要只用viewport单位设定文本。这样会导致文本内容一直随着视口变化,没有了一个最低变化的限度,内容不能够放缩(通过改变宽度导致内容缩在边框之外)  将vw单位加到了使用固定大小解决</p></blockquote></li></ul><ul><li>视口元标签 &lt; meta name=”viewport” content=”width=device-width,initial-scale=1”&gt;</li><li><blockquote><p>这个元标签告诉移动端浏览器，它们应该将视口宽度设定为设备的宽度,为何需要这个？因为移动端浏览器倾向于在它们的视口宽度上说谎。人们开始在小的手机屏幕上阅览网页，而大多数站点未对移动端做优化的缘故。移动端浏览器因此会把视口宽度设为960像素，并以这个宽度渲染页面，结果展示的是桌面布局的缩放版本</p></blockquote></li></ul><h4 id="Css-条件规则组"><a href="#Css-条件规则组" class="headerlink" title="Css 条件规则组"></a>Css 条件规则组</h4><ul><li><p>格式 @ + name</p><h3 id="CSS-指北-–参考MDN"><a href="#CSS-指北-–参考MDN" class="headerlink" title="CSS 指北  –参考MDN"></a>CSS 指北  –参考MDN</h3><h4 id="样式化-文本"><a href="#样式化-文本" class="headerlink" title="样式化 (文本)"></a>样式化 (文本)</h4></li><li><p>字体种类<br>   网页安全字体 font-family 的例子</p></li><li><p>字体大小</p><ul><li>1em 等于我们设计的当前元素的父元素上设置的字体大小 </li><li><blockquote><p>font-size是一个继承属性</p></blockquote></li><li>浏览器的font-size 默认的值为 16px,其他元素也许有默认的大小，比如&lt; h1&gt;元素有一个 2em 的默认值，所以它的最终大小值为 32px</li><li><blockquote><p>rem: 这个单位的效果和 em 差不多，除了 1rem 等于 HTML 中的根元素的字体大小 rem 不支持 Internet Explorer 8 和以下的版本</p></blockquote></li></ul></li><li><p>四种属性改变文本样式</p><pre><code>font-style 打开关闭斜体font-weight 设置字体粗细text-decoration  设置文本划线text-transform: 允许你设置要转换的字体 比如大小写,全半角 </code></pre></li><li><p>text-shadow 文本阴影</p></li><li><p>文本布局</p><pre><code>  text-align 属性定义行内内容（例如文字）如何相对它的块父元素(内容盒子)对齐,这里的行内内容不一定是文字,可能是a标签.  line-height 行高,设置文本每行之间的高 设置无单位的值 例如:1.5 1.5乘以font-size得到的是行高  letter-spacing  字母之间间距  word-spacing 单词与单词之间的间距  text-indent: 指定文本内容的第一行前面应该留出多少的水平空间。  text-overflow: 定义如何向用户表示存在被隐藏的溢出内容。  white-space: 定义如何处理元素内部的空白和换行。  word-break: 指定是否能在单词内部换行。  text-orientation: 定义行内文本的方向。  word-wrap: 指定浏览器是否可以在单词内换行以避免超出范围。  writing-mode: 定义文本行布局为水平还是垂直，以及后继文本流的方向。</code></pre></li></ul><ul><li><p>height = line-height时 文字垂直居中显示</p></li><li><p>内联元素的高度有其中的文本内容 的font-size line-height共同决定, 如果字体大小比行高小一定的值,那高度就是行高</p></li><li><p>在标准模型中，如果你给盒设置 width 和 height，实际设置的是 content box。 padding 和 border 再加上设置的宽高一起决定整个盒子的大小。</p></li><li><p>text-indent 属性能定义一个块元素首行文本内容之前的缩进量。设置负值用来移出文档显示,块内元素中如果有内联元素例如 img span等,会移出文档,  该属性为继承属性 ,对内联元素中的内容无效</p></li><li><p>vertical-align 用于以下两种情况  1.使行内元素盒模型与其行内元素容器垂直对齐</p></li><li><p>2.垂直对齐表格单元内容:</p></li><li><p>vertical-align 只对行内元素、表格单元格元素生效：不能用它垂直对齐块级元素。</p></li><li><p>margin取负值margin-left 和 margin-top：影响自身元素，自身元素将向指定方向偏移margin-bottom将影响后元素，使后元素向上偏移对应像素</p></li></ul><h4 id="样式化列表"><a href="#样式化列表" class="headerlink" title="样式化列表"></a>样式化列表</h4><pre><code>    &lt;ul&gt;和&lt;ol&gt;元素默认设置margin的顶部和底部    &lt;li&gt;  默认是没有设置间距的    &lt;dl&gt;元素默认设置 margin的顶部和底部: 16px(1em) ，无内边距设定    &lt;dt&gt;     &lt;dd&gt; 元素设置为： margin-left  40px (2.5em)。           list-style-type ：设置用于列表的项目符号的类型，例如无序列表的方形或圆形项目符号，或有序列表的数字，字母或罗马数字。    list-style-position ：设置在每个项目开始之前，项目符号是出现在列表项内，还是出现在其外。    list-style-image ：允许您为项目符号使用自定义图片，而不是简单的方形或圆形。    速记属性 list-style 完成以上三个的设置</code></pre><ul><li>管理列表技术  <ul><li>ul ol上的属性    </li><li>start 属性允许你从1 以外的数字开始计数  </li><li>reversed 属性将启动列表倒计数</li><li>value 属性允许设置列表项指定数值</li></ul></li></ul><h4 id="样式化链接"><a href="#样式化链接" class="headerlink" title="样式化链接"></a>样式化链接</h4><ul><li>链接状态 通过伪类进行设置<ul><li>Link (没有访问过的): 这是链接的默认状态 </li><li>Visited: 这个链接已经被访问过了</li><li>Hover: 当用户的鼠标光标刚好停留在这个链接</li><li>Focus: 一个链接当它被选中的时候 (比如通过键盘的 Tab  移动到这个链接的时候)</li><li>Active: 一个链接当它被激活的时候 (比如被点击的时候)</li></ul></li><li>在链接中包含图片 通过background</li><li>样式化链接为按钮 </li></ul><h4 id="网络字体"><a href="#网络字体" class="headerlink" title="网络字体"></a>网络字体</h4><ul><li>在CSS的开始处有一个@font-face块，它指定要下载的字体文件</li></ul><h4 id="样式化表格"><a href="#样式化表格" class="headerlink" title="样式化表格"></a>样式化表格</h4><ul><li><p>使用 table-layout: fixed 创建更可控的表布局，可以通过在标题width中设置width来轻松设置列的宽度。</p></li><li><blockquote><p>默认情况下表格及单元格的宽度取决于其包含的内容。</p></blockquote></li><li><p>使用 border-collapse: collapse 使单元格边框塌陷,使得多个边框合并成一条</p></li><li><p>caption-side属性 : 会将表格的标题&lt; caption&gt; 放到规定的位置</p></li><li><p>使用样式化文本的属性来对表格中的文字格式样式化,加上字体/背景色,完成了样式化的工作</p><h4 id="背景与边框"><a href="#背景与边框" class="headerlink" title="背景与边框"></a>背景与边框</h4></li><li><p>background 属性</p><pre><code>-clip  设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面。三个参数为:border-box  padding-box padding-box-color  设置背景色  关键字transparent-image 用于为一个元素设置一个或者多个背景图像 url()-origin 指定背景图片的原点位置,从border开始 border-box;从内边距开始 padding-box;从内容开始 content-box;  (默认在左上角)- position 为每一个背景图片设置初始位置。这个位置是相对于由 background-origin 定义的位置图层的。如果被定义为两个值，那么第一个值代表水平位置，第二个代表垂直垂直位置。百分比值的偏移指定图片的相对位置和容器的相对位置重合。值0%代表图片的左边界（或上边界）和容器的左边界（上边界）重合。值100%代表图片的右边界（或下边界）和容器的右边界（或下边界）重合。值50%则代表图片的中点和容器的中点重合 关键字 center，用来居中背景图片。(并非把图片移动到中间显示) 关键字 top, left, bottom, right 中的一个。用来指定把这个项目（原文为 item）放在哪一个边缘。另一个维度被设置成 50%，- repeat 定义背景图像的重复方式 背景图像可以沿着水平轴，垂直轴，两个轴重复，或者根本不重复。- size   设置图片大小;  1个值,这个值指定图片的宽  2个值 宽和高;- 关键字cover 拉伸到新的尺寸覆盖容器全部空间  contain 按原有比例缩放到可用空间的尺寸,不一定能够覆盖完容器  - attachment 决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动。 fixed表示背景相对于视口固定背景不会随着内容滚动 local 随着内容滚动    scroll 相对于内容固定,对于外部元素随之滚动  </code></pre></li></ul><ul><li><p>opacity属性指定了一个元素的透明度, 当opacity属性的值应用于某个元素上时，是把这个元素（包括它的内容）当成一个整体看待, 即使这个值没有被子元素继承</p></li><li><blockquote><p>因此，一个元素和它包含的子元素都会具有和元素背景相同的透明度，哪怕这个元素和它的子元素有不同的opacity属性值</p></blockquote></li><li><p>使用opacity属性，当属性值不为1时，会把元素放置在一个新的层叠上下文中。</p></li></ul><h4 id="处理不同方向的文本"><a href="#处理不同方向的文本" class="headerlink" title="处理不同方向的文本"></a>处理不同方向的文本</h4><ul><li>CSS中的书写模式是指文本的排列方向是横向还是纵向的。</li><li>writing-mode 属性使我们从一种模式切换到另一种模式,horizontal-tb模式,水平方式写入，写入方向从top到bottom</li></ul><h4 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h4><ul><li>CSS中万物皆盒，因此我们可以通过给width和height（或者 inline-size 和 block-size）赋值的方式来约束盒子的尺寸。溢出是在你往盒子里面塞太多东西的时候发生的，</li><li>只要有可能，CSS就不会隐藏你的内容，隐藏引起的数据损失通常会造成困扰。</li><li>overflow属性是你控制一个元素溢出的方式，</li><li>溢出建立了块级排版上下文 BFC，你改变了overflow的值的话，对应的盒子就变成了更加小巧的状态。在容器之外的东西没法混进容器内，也没有东西可以突出盒子，进入周围的版面。</li></ul><h4 id="值和单位"><a href="#值和单位" class="headerlink" title="值和单位"></a>值和单位</h4><ul><li><p>在CSS中使用了各种数值数据类型 :数字 长度 百分比</p></li><li><p>长度分为绝对长度 相对长度(em  rem lh),相对长度单位相对于其他一些东西</p></li><li><p>如果使用百分比作为宽度值，那么它将是父值宽度的百分比。</p></li><li><p>如果将元素的字体大小设置为百分比，那么它将是元素父元素字体大小的百分比。</p></li><li><p>关于使用百分比来确定 元素的高度宽度,  body,html 百分比,是针对浏览器可视窗口的宽度高度,对于body中嵌套的子元素,如果也使用百分比确定宽高,那么针对的也是可视窗口</p></li></ul><h4 id="调节项目大小"><a href="#调节项目大小" class="headerlink" title="调节项目大小"></a>调节项目大小</h4><ul><li><p>块级元素的行为就是这样的。它没有高度，或者说高度为0，因为内部没有内容</p></li><li><p>块级元素我们可以给它一个具体的 width 和 height 值, 然后不论我们放什么内容进去它都是该尺寸,如果内容的数量超出了元素可容纳的空间，则设置的高度会导致内容溢出</p></li><li><p>由于存在溢出问题，在网络上使用长度或百分比固定元素的高度需要非常小心。</p></li><li><p>如果你把margins和padding设置为百分数的话，你会注意到一些奇怪的表现。你也许会希望上下的外边距是元素高的一个百分数，左右外边距是元素宽的百分数。但是，情况不是这样的！所有的值都是以父容器的宽度来计算的</p></li><li><p>min-和max-尺寸 这在避免溢出的同时并处理变化容量的内容的时候是很有用的。</p></li><li><p> max-width的常见用法为，在没有足够空间以原有宽度展示图像时，让图像缩小，同时确保它们不会比这一宽度大。作为示例，如果你设定一个图像的属性为width: 100%，而且它的原始宽度小于容器，图像会被强制拉伸以变大，看起来像素更加明显。如果它的原始宽度大于容器，它则会溢出。两种情形都不是你想要看到的。</p></li><li><blockquote><p>如果你使用了max-width: 100%，那么图像可以变得比原始尺寸更小，但是不会大于原始尺寸的100%。这个技术是用来让图片可响应的</p></blockquote></li><li><p>我们有与视口尺寸相关的度量单位，即意为视口宽度的vw单位，以及意为视口高度的 vh单位。使用这些单位，你可以把一些东西做得随用户的视口改变大小。1vh等于视口高度的1%，1vw则为视口宽度的1%.你可以用这些单位约束盒子的大小</p></li></ul><h4 id="图像、媒体和表单元素"><a href="#图像、媒体和表单元素" class="headerlink" title="图像、媒体和表单元素"></a>图像、媒体和表单元素</h4><ul><li>图像和视频被描述为替换元素。 这意味着CSS不能影响这些元素的内部布局-仅影响它们在页面上于其他元素中的位置,</li><li>你可以对容器内的图像作其他选择，例如，你可能想把一张图像调整到能够完全盖住一个盒子的大小。</li><li>object-fit属性可以在这里帮助你。当使用object-fit时，替换元素可以以多种方式被调整到合乎盒子的大小。 cover  contain fill …</li><li>在替换元素使用各式CSS布局技巧时，你可能深切地体会到他们的展现略微与其他元素不同，例如，在一个flex或者grid布局中，元素默认会把拉伸到充满整块区域。图像不会拉伸，而是会被对齐到网格区域或者弹性容器的起始处。</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端Css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Css 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发帖人</title>
    <link href="/2020/12/13/%E5%89%8D%E7%AB%AF/"/>
    <url>/2020/12/13/%E5%89%8D%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h4 id="测试-第一次"><a href="#测试-第一次" class="headerlink" title="测试 第一次"></a>测试 第一次</h4><ul><li>样 二分法法分f</li><li>分法方法二分法</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端Css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Css 布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
